if( tag == 'xxx')
stop('No tag provided.')
pb.url <- (paste('http://api.pinboard.in/v1/posts/all?auth_token=michael_brendan_dougherty:45502A65EA7E918288B0&tag=new',tag,sep=','))
# cat(pb.url)
xmlTree <- xmlTreeParse(pb.url, useInternalNodes = TRUE)
pb.xml <- xpathApply(xmlTree, '//post')
xmlList <- lapply(pb.xml, xmlToList)
pb.vec <- sapply(xmlList, parse.pinboard)
pb.out <- paste(pb.vec,collapse="&nbsp;&bull;&nbsp;")
pb.out
}
parse.pinboard <- function(pb = ''){
paste(pb['extended'],'~[', pb['description'], '](', pb['href'],')', sep='')
}
score.links <-  function(x){
cat(
print.boxscore(x),
'Stories about ', x$away.team, ':',
'\n',
fetch.pinboard.tag(x$away.team),
'\n',
'Stories about ', x$home.team, ':',
'\n',
fetch.pinboard.tag(x$home.team),
'\n',
sep=''
)
}
fetch.pinboard.tag('CWS')
source('~/Dropbox/R_baseball/baseball_functions.r', echo=TRUE)
fetch.pinboard.tag('CWS')
fetch.pinboard.tag('CWS')
library(XML)
fetch.pinboard.tag('CWS')
source('~/Dropbox/R_baseball/baseball_functions.r', echo=TRUE)
require(plyr)
require(ggplot2)
require(reshape)
require(FME)
require(xtable)
source('~/Code/energy_projects/func.r')
options(scipen=5)
percentify <- function(x, r=1, keep.zeros=FALSE){
ifelse (as.numeric(x) != 0 | keep.zeros==TRUE,  paste( format(round ( as.numeric(x) * 100, r) , nsmall=r) , '%', sep='')
,
'')
}
calc.sensitivity <- function(dat, var, delta) {
var.a <- dat[var,'default']
result.a <- calc.benefits(dat)
dat[var,'default'] <- dat[var,'default'] * delta
var.b <- dat[var,'default']
result.b <- calc.benefits(dat)
((result.b - result.a) / result.a) / ((var.b - var.a) / var.a)
(result.b - result.a) / (var.b - var.a)
}
inputs <-data.frame(
default=c(
80,20,5,5,10,250,100000,2
)
)
row.names(inputs) <- c(
'on.peak.rate',
'off.peak.rate',
'demand.charge',
'capacity',
'load.shift.duration',
'load.shifting.periods',
'cost.per.volt.sag',
'volt.sag.count'
)
inputs$var.name <- row.names(inputs)
# From http://www.tybecenergy.com/pricehistory/pjm_settle.php
on.peak.rate <- 44.40 # $
off.peak.rate <- 31.13 # $
b.total <- calc.benefits(inputs)
sprintf("$%.f", b.total)
percent(exercise(inputs, 'capacity',1.10) / b.total - 1)
percent(exercise(inputs, 'on.peak.rate',1.10) / b.total - 1)
df.delta10 <- ddply(inputs, .(var.name), function(x){
c( delta10=(exercise(inputs, x$var.name, 1.10 )-b.total)/b.total
)
}
)
df.delta10 <- transform(df.delta10,
var.name = reorder(var.name, delta10))
ggplot(df.delta10, aes(var.name, delta10)) + geom_bar(stat="identity") + coord_flip() + scale_y_continuous(labels=percent, limits=c(-0.05,0.1))
on.peak.rate.alt <- c(50,60,70,80,90,100)
load.shift.duration.alt <- c(8,9,10,11)
alt.vars <- expand.grid("on.peak.rate.alt"=on.peak.rate.alt, "load.shift.duration.alt"=load.shift.duration.alt)
for(i in 1:nrow(alt.vars)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars$on.peak.rate.alt[i]
alt.inputs['load.shift.duration','default']  <- alt.vars$load.shift.duration.alt[i]
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
alt.vars
cast(alt.vars, on.peak.rate.alt~load.shift.duration.alt)
alt.inputs <- inputs
alt.inputs['capacity','default'] <- 10
on.peak.rate.alt <- c(50,60,70,80,90,100)
load.shift.duration.alt <- c(8,9,10,11)
alt.vars <- expand.grid("on.peak.rate.alt"=on.peak.rate.alt, "load.shift.duration.alt"=load.shift.duration.alt)
for(i in 1:nrow(alt.vars)){
alt.inputs['on.peak.rate','default']  <- alt.vars$on.peak.rate.alt[i]
alt.inputs['load.shift.duration','default']  <- alt.vars$load.shift.duration.alt[i]
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
alt.vars
cast(alt.vars, on.peak.rate.alt~load.shift.duration.alt)
print(xtable(inputs), type='html')
inputs$uncertainty.pct <- c(0.2,0.2,0.2,0.03,0.1,0.1,0.2,.5)
inputs$uncertainty.abs <- inputs$default * inputs$uncertainty.pct
inputs$low <- inputs$default - inputs$uncertainty.abs
inputs$high <- inputs$default + inputs$uncertainty.abs
print(xtable(inputs), type='html')
alt.inputs <- inputs[,c('default','var.name','uncertainty.abs')]
varied <- ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity(alt.inputs, x$var.name, 1.01) ))
varied$km <- (varied$uncertainty.abs * varied$sensitivity)^2
varied
varied <- ddply(varied, .(),  transform, contribution=km/sum(km) )
varied$contribution.pct <- percentify(varied$contribution)
print(xtable(varied), type='html')
cat('Total Uncertainty: ' , sprintf("$%.0f", sum(varied$km)^.5) )
ggplot(varied, aes(var.name, contribution)) + geom_bar(stat="identity") + coord_flip() + scale_y_continuous(labels=percent, limits=c(-0.05,1))
inputs.b <- inputs
inputs.b['on.peak.rate','uncertainty.pct'] <- 0.1
inputs.b$uncertainty.abs <- inputs.b$default * inputs.b$uncertainty.pct
varied.b <- ddply(inputs.b, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity(inputs.b, x$var.name, 1.01) ))
varied.b$km <- (varied.b$uncertainty.abs * varied.b$sensitivity)^2
varied.b <- ddply(varied.b, .(),  transform, contribution=km/sum(km) )
varied.b$contribution.pct <- percentify(varied.b$contribution)
print(xtable(varied.b), type='html')
cat('Total Uncertainty: ' , sprintf("$%.0f", sum(varied.b$km)^.5) )
inputs$sd <- (inputs$default * inputs$uncertainty.pct)/2
x=seq(56,104,length=200)
y=dnorm(x,mean=80,sd=8)
plot(x,y,type="l",lwd=2,col="red")
x=seq(4.775,5.225,length=200)
y=dnorm(x,mean=5,sd=0.075)
plot(x,y,type="l",lwd=2,col="red")
print(xtable(inputs[,c('var.name','default','uncertainty.abs')] ), type='html')
mc.benefits(inputs, 10)
mc.benefits(inputs, 10)[1]
inputs
calc.benefits(inputs)
mc.benefits(inputs)
mc.benefits(inputs, 2)
str(calc.benefits(inputs))
source('~/Code/energy_projects/func.r')
mc.benefits(inputs, 2)
inputs
calc.benefits(inputs)
dat <- inputs[,c('default','var.name','sd')]
dat
ddply(dat, .(var.name, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
?rnorm
ddply(dat, .(var.name, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
ddply(dat, .(var.name, default, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
rnorm(10, 250, 12.5)
source('~/Code/energy_projects/func.r')
mc.benefits(inputs, 2)
calc.benefits(inputs)
inputs
mc.dat <-  ddply(inputs, .(var.name, default, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
mc.dat
calc.benefits(mc.dat)
calc.benefits(inputs)
inputs
calc.benefits(mc.dat)
source('~/Code/energy_projects/func.r')
mc.dat <-  ddply(inputs, .(var.name, default, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
source('~/Code/energy_projects/func.r')
calc.benefits(mc.dat)
mc.data
mc.dat
row.names(mc.dat) <- mc.dat$var.name
mc.dat
calc.benefits(mc.dat)
mc.benefits(mc.dat)
mc.benefits(mc.dat, 2)
mc.benefits(mc.dat, 1)
source('~/Code/energy_projects/func.r')
mc.benefits(inputs, 1)
mc.benefits(inputs, 10)
mc.benefits(inputs, 100)
hist(mc.benefits(inputs, 100)
)
mc.results <- mc.benefits(inputs, 5000)
hist(mc.results)
summarize(mc.results)
summary(mc.results)
std(mc.results)
sd(mc.results)
?hist
hist(mc.results, freq=TRUE)
hist(mc.results, freq=FALSE)
?hist
hist(mc.results, freq=FALSE, breaks=100)
hist(mc.results, freq=FALSE, breaks=200)
hist(mc.results, freq=FALSE, breaks=50)
t.test(mc.results, conf.level=0.99)
?t.test
t.test(mc.results, conf.level=0.95)
summary(mc.results)
hist(mc.results, freq=FALSE, breaks=50)
describe(mc.results)
install.packages('pastecs')
require(pastecs)
stat.desc(mc.results)
t(stat.desc(mc.results))
data.frame(stat.desc(mc.results))
str(data.frame(stat.desc(mc.results)))
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
fetch.pinboard.tag('BOS')
library(XML)
source('~/Dropbox/R_baseball/baseball_functions_test.r')
fetch.pinboard.tag('BOS')
fetch.pinboard.tag('BAL')
fetch.pinboard.tag('HOU')
fetch.pinboard.tag('NYY')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
fetch.pinboard.tag('CWS')
fetch.pinboard.tag('TEX')
fetch.pinboard.tag('TOR')
fetch.pinboard.tag('PHI')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/.active-rstudio-document', echo=TRUE)
stat.desc(mc.results)
stat.desc(mc.results)$std.dev
stat.desc(mc.results)['std.dev']
stat.desc(mc.results)['std.dev'] * 2
?format
format(stat.desc(mc.results)['std.dev'] * 2 , nsmall = 2)
format(stat.desc(mc.results)['std.dev'] * 2 , nsmall = 2, big.mark=',')
paste(
'$', format(stat.desc(mc.results)['std.dev'] * 2 , nsmall = 2, big.mark=',')
)
cat(
'$', format(stat.desc(mc.results)['std.dev'] * 2 , nsmall = 2, big.mark=',')
)
cat(
'$', format(stat.desc(mc.results)['std.dev'] * 2 , nsmall = 2, big.mark=',')
sep='')
cat(
'$', format(stat.desc(mc.results)['std.dev'] * 2 , nsmall = 2, big.mark=',')
,sep='')
calc.sensitivity
inputs
source('~/Code/energy_projects/func.r')
source('~/Code/energy_projects/func.r')
varied.mc <- ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(alt.inputs, x$var.name, 1.01, 5000) ))
calc.sensitivity.mc(alt.inputs, x$var.name, 1.01, 5000)
alt.inputs
calc.sensitivity(alt.inputs, x$var.name, 1.01)
alt.inputs <- inputs[,c('default','var.name','uncertainty.abs')]
varied <- ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity(alt.inputs, x$var.name, 1.01) ))
varied$km <- (varied$uncertainty.abs * varied$sensitivity)^2
varied
varied <- ddply(varied, .(),  transform, contribution=km/sum(km) )
varied$contribution.pct <- percentify(varied$contribution)
alt.inputs
inputs
ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(alt.inputs, x$var.name, 1.01) ))
ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(alt.inputs, x$var.name, 1.01) ))
ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(alt.inputs, x$var.name, 1.01),5000 ))
uncertainty.abs
sensitivity=calc.sensitivity.mc(alt.inputs, capacity, 1.01),5000 )
sensitivity=calc.sensitivity.mc(alt.inputs, capacity, 1.01)
sensitivity=calc.sensitivity.mc(alt.inputs, 'capacity', 1.01, 100)
calc.sensitivity.mc(dat=alt.inputs, var='capacity', 1.01, 100)
inputs
alt.inputs
alt.inputs['capacity','default']
calc.sensitivity.mc(dat=alt.inputs, var='capacity', 1.01, 100)
calc.sensitivity.mc(dat=inputs, var='capacity', 1.01, 100)
source('~/Code/energy_projects/func.r')
calc.sensitivity.mc(dat=inputs, var='capacity', 1.01, 100)
source('~/Code/energy_projects/func.r')
source('~/Code/energy_projects/func.r')
calc.sensitivity.mc(dat=inputs, var='capacity', 1.01, 100)
varied.mc <- ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(alt.inputs, x$var.name, 1.01, 5000) ))
varied.mc <- ddply(inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(alt.inputs, x$var.name, 1.01, 5000) ))
varied.mc <- ddply(inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(inputs, x$var.name, 1.01, 5000) ))
varied.mc
varied.mc <- ddply(varied.mc, .(),  transform, contribution=km/sum(km) )
varied.mc$km <- (varied.mc$uncertainty.abs * varied.mc$sensitivity)^2
varied.mc
varied.mc <- ddply(varied.mc, .(),  transform, contribution=km/sum(km) )
varied.mc$contribution.pct <- percentify(varied.mc$contribution)
varied.mc
varied.mc[,c('var.name','contribution.pct')]
library(RCurl)
library(XML)
url <- "http://www.matrix.nwmls.com/Matrix/Public/Portal.aspx?ID=9711750986"
webpage <- getURL(url)
webpage
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
pagetree <- htmlTreeParse(webpage, error=function(...){})
pagetree
body <- pagetree$children$html$children$body
divbodyContent <- body$children$div$children[[1]]$children$div$children[[4]]
tables <- divbodyContent$children[names(divbodyContent)=="table"]
tables
body
divbodyContent
body
body$children$div$children[[1]]$children$d
body$children$div$children[[1]]
body$children
str(body$children)
length(body$children)
body$children[1]
body$children[2]
body$children[1]
divbodyContent <- body$children
divbodyContent$children[names(divbodyContent)=="table"]
divbodyContent[names(divbodyContent)=="table"]
tables <- divbodyContent[names(divbodyContent)=="table"]
tables
tables <- readHTMLTable(url)
tables
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
tables[[which.max(n.rows)]]
dat <- read.csv('~/dropbox/Family Documents/destination work/Houses')
dat <- read.csv('~/Dropbox/Family Documents/destination work/Houses')
dir('~/Dropbox/Family Documents/destination work/Houses')
dat <- read.csv('~/Dropbox/Family Documents/destination work/Houses/house_matrix.csv')
require(knitr)
require(ggplot2)
require(plyr)
require(reshape)
dat <- read.csv('~/Dropbox/Family Documents/destination work/Houses/house_matrix.csv')
head(dat)
dat <- read.csv('~/Dropbox/Family Documents/destination work/Houses/house_matrix.csv')
head(dat)
str(Dat)
str(dat)
dat <- read.csv('~/Dropbox/Family Documents/destination work/Houses/house_matrix.csv', stringsasfactors=FALSE)
dat <- read.csv('~/Dropbox/Family Documents/destination work/Houses/house_matrix.csv', stringsasFactors=FALSE)
dat <- read.csv('~/Dropbox/Family Documents/destination work/Houses/house_matrix.csv', stringsAsFactors=FALSE)
head(dat)
str(dat)
dat <- read.csv('~/Dropbox/Family Documents/destination work/Houses/house_matrix.csv', stringsAsFactors=FALSE)
str(dat)
dat <- read.csv('~/Dropbox/Family Documents/destination work/Houses/house_matrix.csv', stringsAsFactors=FALSE)
head(dat)
str(dat)
unique(dat$AREA)
ggplot(dat, aes(x=PRICE)) + geom_point(aes(y=SF))
ggplot(dat, aes(x=PRICE)) + geom_point(aes(y=SF)) + scale_x_continuous(labels=dollar)
ggplot(dat, aes(x=PRICE)) + geom_point(aes(y=SF)) + scale_x_continuous(labels = dollar)
install.packages(c("colorspace", "evaluate", "foreign", "formatR", "highr", "knitr", "lattice", "lubridate", "Matrix", "mgcv", "TestSurvRec"))
install.packages('devtools')
require(devtools)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
install.packages('shiny')
setwd("~/Code/insurance_estimator")
library(shiny)
runApp()
shinyapps::setAccountInfo(name="mattfrost", token="79B5C47FDE8BC5F15184EDE5C3673E18", secret="ACBFQn0tQ4OzQLXrJr2jMAud51pHEWFwR5DRtrGM")
?reactive
runApp()
?shinyServer
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
require(knitr)
require(XML)
require(plyr)
require(ggplot2)
require(RCurl)
require(stringr)
require(reshape)
require(scales)
# require(RSocrata)
source('func.r')
opts_chunk$set(warning = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderplot
?renderPlot()
?renderPlot()
runApp()
runApp()
runApp()
runApp()
deployApp()
deployApp()
deployApp(size="medium")
?deployApp()
runApp()
scaleApp(instances = 3)
scaleApp("insurance_estimator", instances = 3)
deployApp()
setwd("~/Code/insurance_estimator")
require(knitr)
require(XML)
require(plyr)
require(ggplot2)
require(RCurl)
require(stringr)
require(reshape)
require(scales)
# require(RSocrata)
source('func.r')
opts_chunk$set(warning = FALSE)
state <- 'WA'
county <- 'WHATCOM'
policies <- fetch.policies(state, county)
policies
setwd("~/Code/calculated_risk")
require(rdatamarket)
install.packages('rdatamarket')
require(knitr)
require(ggplot2)
require(rdatamarket)
require(plyr)
require(lubridate)
install.packages(c('knitr','ggplot2','plyr','lubridate'))
install.packages(c("knitr", "ggplot2", "plyr", "lubridate"))
require(knitr)
require(ggplot2)
require(rdatamarket)
require(plyr)
require(lubridate)
gdp <- as.data.frame(dmseries("http://datamarket.com/data/set/3p4m/gross-domestic-product-gdp-sum-of-pieces#!ds=3p4m&display=line"))
str(gdp)
gdp$quarter <- row.names(gdp)
names(gdp) <- c('gdp','quarter')
gdp$growth <- ( gdp[,'gdp'] - c(NA, gdp[1:nrow(gdp)-1,'gdp']) ) / c(NA, gdp[1:nrow(gdp)-1,'gdp'])
gdp$qtr.num <- as.numeric(gsub(' Q', '.' ,gdp$quarter))
ggplot(subset(gdp, qtr.num >= 2000.1)) + geom_line(aes(x=qtr.num, y=growth))
emp <- as.data.frame(dmseries("http://datamarket.com/data/set/1mj6/employment-level"))
emp <- data.frame('month_year'=row.names(emp), 'emp_level'=emp[,'Employment.Level'])
emp$month <- match(gsub(' [0-9]{4}', '',  emp$month_year), month.abb)
emp$year <- as.numeric(laply(strsplit(as.character(emp$month_year), ' '), tail, 1))
emp$date <- ymd(paste(emp$year, emp$month, 1, sep='-'))
head(emp)
ggplot(subset(emp, year >= 2000)) + geom_line(aes(x=date, y=emp_level))
# unemp <- as.data.frame(dmseries("http://data.is/qb61uf"))
unemp <- as.data.frame(dmseries("http://datamarket.com/data/set/1les/unemployment-rate"))
unemp <- data.frame('month_year'=row.names(unemp), 'unemp_rate'=unemp[,'All.Industries.Government.Wage.and.Salary.Workers..Not.Seasonally.Adjusted'])
unemp <- subset(unemp, !is.na(unemp_rate))
unemp$month <- match(gsub(' [0-9]{4}', '',  unemp$month_year), month.abb)
unemp$year <- as.numeric(laply(strsplit(as.character(unemp$month_year), ' '), tail, 1))
unemp$date <- ymd(paste(unemp$year, unemp$month, 1, sep='-'))
ggplot(subset(unemp, year >= 2000)) + geom_line(aes(x=date, y=unemp_rate))
